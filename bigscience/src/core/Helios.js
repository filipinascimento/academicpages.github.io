import"../../web_modules/d3.js";import*as b from"../../web_modules/gl-matrix.js";import{Network as k}from"./Network.js";import*as d from"../utils/webglutils.js";import*as l from"../utils/xnet.js";export class Helios{constructor({elementID:a,nodes:c={},edges:f=[],onNodeClick:g=null,onEdgeClick:e=null,display:h=[]}){this.element=document.getElementById(a),this.element.innerHTML="",this.canvasElement=document.createElement("canvas"),this.element.appendChild(this.canvasElement),this.network=new k(c,f),this.display=h,this.rotationMatrix=b.mat4.create(),this.translatePosition=b.vec3.create(),this.mouseDown=!1,this.lastMouseX=null,this.lastMouseY=null,this.redrawingFromMouseWheelEvent=!1,this.fastEdges=!0,this.animate=!1,b.mat4.identity(this.rotationMatrix);var i=[0,0,0];this.gl=d.createWebGLContext(this.canvasElement,{antialias:!0,powerPreference:"high-performance",desynchronized:!0}),console.log(this.gl),this.initialize(),window.onresize=j=>{this.willResizeEvent(j)}}async initialize(){await this._setupShaders(),await this._buildGeometry(),await this._buildEdgesGeometry(),await this.willResizeEvent(0),await this.redraw(),await this._setupCamera()}async _setupShaders(){let a=await d.getShader(this.gl,"edges-vertex"),c=await d.getShader(this.gl,"edges-fragment");this.edgesShaderProgram=new d.ShaderProgram(a,c,["projectionViewMatrix","nearFar","linesIntensity"],["vertex","color"],this.gl);let f=await d.getShader(this.gl,"vertices-vertex"),g=await d.getShader(this.gl,"vertices-fragment");this.verticesShaderProgram=new d.ShaderProgram(f,g,["viewMatrix","projectionMatrix","normalMatrix"],["vertex","position","color","intensity","scale"],this.gl)}async _buildGeometry(){let a=this.gl,c=15;this.nodesGeometry=d.makePlane(a,!1,!1);let f=this.network.positions,g=this.network.colors,e=this.network.scales,h=this.network.intensities;this.nodesPositionBuffer=a.createBuffer(),a.bindBuffer(a.ARRAY_BUFFER,this.nodesPositionBuffer),a.bufferData(a.ARRAY_BUFFER,f,a.STATIC_DRAW),this.nodesColorBuffer=a.createBuffer(),a.bindBuffer(a.ARRAY_BUFFER,this.nodesColorBuffer),a.bufferData(a.ARRAY_BUFFER,g,a.STATIC_DRAW),this.nodesScaleBuffer=a.createBuffer(),a.bindBuffer(a.ARRAY_BUFFER,this.nodesScaleBuffer),a.bufferData(a.ARRAY_BUFFER,e,a.STATIC_DRAW),this.nodesIntensityBuffer=a.createBuffer(),a.bindBuffer(a.ARRAY_BUFFER,this.nodesIntensityBuffer),a.bufferData(a.ARRAY_BUFFER,h,a.STATIC_DRAW),a.enable(a.DEPTH_TEST)}async _buildEdgesGeometry(){let a=this.gl,c=this.network.indexedEdges,f=this.network.positions,g=this.network.colors,e=new Object(),h;if(f.length<64e3)h=new Uint16Array(c),e.indexType=a.UNSIGNED_SHORT;else{var i=a.getExtension("OES_element_index_uint");i==null?(h=new Uint16Array(c),e.indexType=a.UNSIGNED_SHORT):(h=new Uint32Array(c),e.indexType=a.UNSIGNED_INT)}e.vertexObject=a.createBuffer(),a.bindBuffer(a.ARRAY_BUFFER,e.vertexObject),a.bufferData(a.ARRAY_BUFFER,new Float32Array(f),a.STATIC_DRAW),e.colorObject=a.createBuffer(),a.bindBuffer(a.ARRAY_BUFFER,e.colorObject),a.bufferData(a.ARRAY_BUFFER,new Float32Array(g),a.STATIC_DRAW),e.numIndices=h.length,e.indexObject=a.createBuffer(),a.bindBuffer(a.ELEMENT_ARRAY_BUFFER,e.indexObject),a.bufferData(a.ELEMENT_ARRAY_BUFFER,h,a.STREAM_DRAW),this.edgesGeometry=e}async resizeGL(a,c){this.gl.viewport(0,0,a,c),window.requestAnimationFrame(()=>this.redraw())}async _setupCamera(){this.canvasElement.onmousedown=a=>this.handleMouseDown(a),document.onmouseup=a=>this.handleMouseUp(a),document.onmousemove=a=>this.handleMouseMove(a),document.onclick=void 0,this.canvasElement.onclick=void 0}willResizeEvent(a){let c=window.devicePixelRatio||1;this.canvasElement.style.width=this.element.clientWidth+"px",this.canvasElement.style.height=this.element.clientHeight+"px",this.canvasElement.width=c*this.element.clientWidth,this.canvasElement.height=c*this.element.clientHeight,this.resizeGL(this.canvasElement.width,this.canvasElement.height)}handleMouseDown(a){a.preventDefault(),this.mouseDown=!0;let c,f;a.originalEvent!==void 0?(c=a.originalEvent.pageX,f=a.originalEvent.pageY):(c=a.pageX,f=a.pageY),this.lastMouseX=c,this.lastMouseY=f}handleMouseUp(a){a.preventDefault(),this.mouseDown=!1,this.animate||window.requestAnimationFrame(()=>this.redraw())}handleMouseMove(a){a.preventDefault();if(!this.mouseDown)return;let c,f,g,e;a.originalEvent!==void 0?(g=a.originalEvent.pageX,e=a.originalEvent.pageY):(g=a.pageX,e=a.pageY),c=g,f=e;let h=c-this.lastMouseX,i=b.mat4.create();b.mat4.identity(i),b.mat4.rotate(i,i,d.degToRad(h/2),[0,1,0]);let j=f-this.lastMouseY;b.mat4.rotate(i,i,d.degToRad(j/2),[1,0,0]),b.mat4.multiply(this.rotationMatrix,i,this.rotationMatrix),this.lastMouseX=c,this.lastMouseY=f,this.animate||window.requestAnimationFrame(()=>this.redraw())}async redraw(){let a=this.gl,c=a.getExtension("ANGLE_instanced_arrays"),f=6;a.depthMask(!0),a.clearColor(.5,.5,.5,1),a.clear(a.COLOR_BUFFER_BIT|a.DEPTH_BUFFER_BIT),a.lineWidth(4),this.projectionMatrix=b.mat4.create(),this.viewMatrix=b.mat4.create(),b.mat4.perspective(this.projectionMatrix,Math.PI*2/360*70,this.canvasElement.width/this.canvasElement.height,.005,100),b.mat4.identity(this.viewMatrix),b.mat4.translate(this.viewMatrix,this.viewMatrix,[0,0,-f]),b.mat4.multiply(this.viewMatrix,this.viewMatrix,this.rotationMatrix),b.mat4.scale(this.viewMatrix,this.viewMatrix,[.01,.01,.01]),b.mat4.translate(this.viewMatrix,this.viewMatrix,this.translatePosition),this.verticesShaderProgram.use(a),this.verticesShaderProgram.attributes.enable("vertex"),this.verticesShaderProgram.attributes.enable("position"),this.verticesShaderProgram.attributes.enable("scale"),this.verticesShaderProgram.attributes.enable("intensity"),a.enable(a.BLEND),a.blendFuncSeparate(a.SRC_ALPHA,a.ONE_MINUS_SRC_ALPHA,a.ZERO,a.ONE),a.bindBuffer(a.ARRAY_BUFFER,this.nodesGeometry.vertexObject),a.vertexAttribPointer(this.verticesShaderProgram.attributes.vertex,3,a.FLOAT,!1,0,0),c.vertexAttribDivisorANGLE(this.verticesShaderProgram.attributes.vertex,0),this.nodesGeometry.indexObject&&a.bindBuffer(a.ELEMENT_ARRAY_BUFFER,this.nodesGeometry.indexObject),a.uniformMatrix4fv(this.verticesShaderProgram.uniforms.projectionMatrix,!1,this.projectionMatrix),a.uniformMatrix4fv(this.verticesShaderProgram.uniforms.viewMatrix,!1,this.viewMatrix);let g=b.mat3.create();b.mat3.normalFromMat4(g,this.viewMatrix),a.uniformMatrix3fv(this.verticesShaderProgram.uniforms.normalMatrix,!1,g);let e=this.network.colors,h=this.network.positions,i=this.network.scales,j=this.network.intensities;a.bindBuffer(a.ARRAY_BUFFER,this.nodesPositionBuffer),a.enableVertexAttribArray(this.verticesShaderProgram.attributes.position),a.vertexAttribPointer(this.verticesShaderProgram.attributes.position,3,a.FLOAT,!1,0,0),c.vertexAttribDivisorANGLE(this.verticesShaderProgram.attributes.position,1),a.bindBuffer(a.ARRAY_BUFFER,this.nodesColorBuffer),a.enableVertexAttribArray(this.verticesShaderProgram.attributes.color),a.vertexAttribPointer(this.verticesShaderProgram.attributes.color,3,a.FLOAT,!1,0,0),c.vertexAttribDivisorANGLE(this.verticesShaderProgram.attributes.color,1),a.bindBuffer(a.ARRAY_BUFFER,this.nodesScaleBuffer),a.enableVertexAttribArray(this.verticesShaderProgram.attributes.scale),a.vertexAttribPointer(this.verticesShaderProgram.attributes.scale,1,a.FLOAT,!1,0,0),c.vertexAttribDivisorANGLE(this.verticesShaderProgram.attributes.scale,1),a.bindBuffer(a.ARRAY_BUFFER,this.nodesIntensityBuffer),a.enableVertexAttribArray(this.verticesShaderProgram.attributes.intensity),a.vertexAttribPointer(this.verticesShaderProgram.attributes.intensity,1,a.FLOAT,!1,0,0),c.vertexAttribDivisorANGLE(this.verticesShaderProgram.attributes.intensity,1),this.nodesGeometry.indexObject?c.drawElementsInstancedANGLE(a.TRIANGLES,this.nodesGeometry.numIndices,this.nodesGeometry.indexType,0,this.network.positions.length/3):c.drawArraysInstancedANGLE(a.TRIANGLE_STRIP,0,this.nodesGeometry.numIndices,this.network.positions.length/3),this.verticesShaderProgram.attributes.disable("vertex"),this.verticesShaderProgram.attributes.disable("position"),this.verticesShaderProgram.attributes.disable("scale"),this.verticesShaderProgram.attributes.disable("intensity"),(this.mouseDown||this.redrawingFromMouseWheelEvent)&&this.fastEdges||(this.edgesShaderProgram.use(a),this.edgesShaderProgram.attributes.enable("vertex"),this.edgesShaderProgram.attributes.enable("color"),a.enable(a.BLEND),a.depthMask(!0),this.projectionViewMatrix=b.mat4.create(),b.mat4.multiply(this.projectionViewMatrix,this.projectionMatrix,this.viewMatrix),a.bindBuffer(a.ARRAY_BUFFER,this.edgesGeometry.vertexObject),a.vertexAttribPointer(this.edgesShaderProgram.attributes.vertex,3,a.FLOAT,!1,0,0),c.vertexAttribDivisorANGLE(this.edgesShaderProgram.attributes.vertex,0),a.bindBuffer(a.ARRAY_BUFFER,this.edgesGeometry.colorObject),a.vertexAttribPointer(this.edgesShaderProgram.attributes.color,3,a.FLOAT,!1,0,0),c.vertexAttribDivisorANGLE(this.edgesShaderProgram.attributes.color,0),a.bindBuffer(a.ELEMENT_ARRAY_BUFFER,this.edgesGeometry.indexObject),a.uniformMatrix4fv(this.edgesShaderProgram.uniforms.projectionViewMatrix,!1,this.projectionViewMatrix),a.uniform1f(this.edgesShaderProgram.uniforms.linesIntensity,100/255),a.drawElements(a.LINES,this.edgesGeometry.numIndices,this.edgesGeometry.indexType,0),this.edgesShaderProgram.attributes.disable("vertex"),this.edgesShaderProgram.attributes.disable("color"))}}export{l as xnet};
